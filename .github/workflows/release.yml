name: Build and Release Tagged Versions

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    name: Build and Release with GoReleaser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up QEMU for Docker cross-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  windows-installer:
    name: Build Windows Installer
    needs: goreleaser
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Windows binaries from release
        uses: robinraju/release-downloader@v1.11
        with:
          repository: "${{ github.repository }}"
          tag: "${{ github.ref_name }}"
          fileName: "purtypics_*_windows_*.zip"
          out-file-path: "dist"
          extract: true

      - name: Install NSIS
        run: |
          choco install nsis -y
          echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Prepare installer files
        run: |
          # Debug: List all extracted files
          Write-Host "Contents of dist directory:"
          Get-ChildItem -Path dist -Recurse | ForEach-Object { Write-Host $_.FullName }
          
          # Find the extracted Windows executable (might be purtypics or purtypics.exe)
          $exePath = Get-ChildItem -Path dist -Recurse | Where-Object { $_.Name -eq "purtypics.exe" -or $_.Name -eq "purtypics" } | Select-Object -First 1
          if ($exePath) {
            # Ensure the destination directory exists
            New-Item -ItemType Directory -Force -Path packaging\windows | Out-Null
            # Copy and rename to purtypics.exe if needed
            Copy-Item $exePath.FullName -Destination packaging\windows\purtypics.exe
            Write-Host "Copied $($exePath.Name) from $($exePath.FullName) to packaging\windows\purtypics.exe"
          } else {
            Write-Error "Could not find purtypics executable in extracted files"
            exit 1
          }

      - name: Build NSIS installer
        run: |
          cd packaging\windows
          makensis purtypics.nsi
          
      - name: Upload installer to release
        uses: softprops/action-gh-release@v2
        with:
          files: packaging/windows/purtypics-installer.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}